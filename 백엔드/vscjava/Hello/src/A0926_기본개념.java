public class A0926_기본개념 {
    public static void main(String[] args) {

        // 자바는 기본 자료형으로 만든 변수는 일반 변수로 취급하고 클래스로 만든 변수(객체)는 참조형 변수로 취급한다.

        // 자바의 기본 자료형
        // boolean : 1바이트, c++의 bool과 같은 기능을 한다. c++처럼 0과 1을 기억하는 것이 아니고 true, false를
        // 기억한다.
        // byte : 1바이트, 데이터 전송에 사용한다.
        // char : 2바이트, 1문자, c++은 ascii 코드를 사용해서 한글, 한자를 2바이트로 처리하지만 자바는 모든 문자를 2바이트로
        // 처리한다.
        // short : 2바이트, -32768 ~ 32767 사이의 정수를 기억한다.
        // int : 4바이트, -2147483648 ~ 2147483647 사이의 정수를 기억한다.
        // long : 8바이트, -2의 63승 ~ 2의 63승 -1 사이의 정수를 기억한다.
        // float : 4바이트, 단정도 실수, 소수점 아래로 6자리 정도를 표현한다.
        // double : 8바이트, 배정도 실수, 소수점 아래로 16자리 정도를 표현한다.

        // 문자열 "AAA"가 처음 사용되므로 메모리 어딘가에 "AAA"를 만들고 시작 주소를 str1에 저장한다.
        String str1 = "AAA";
        // "AAA"가 이미 메모리에 생성되어있는 상태이므로 메모리에 이미 생성되어있던 "AAA"의 주소를 str2에 저장한다.
        String str2 = "AAA";

        if (str1 == str2) {
            System.out.println("같다");
        } else {
            System.out.println("다르다");
        }

        // 아래와 같이 new를 사용해서 "AAA"를 만들면 메모리에 "AAA"의 존재 여부와 관계없이 무조건 다시 만들어서 그 시작 주소를
        // str3에 할당한다.
        String str3 = new String("AAA");
        if (str1 == str3) {
            System.out.println("같다");
        } else {
            System.out.println("다르다");
        }

        // "=="를 사용해서 같은가 비교할 수 있는 데이터는 기본 자료형 8가지와 null만 가능하다 => 객체는 "=="로 비교하면 안된다.
        // 기본 자료형과 null을 제외한 나머지는 클래스로 생성한 객체이므로 참조 변수에 저장된 객체가 생성된 주소를 비교하게 된다. => 해시
        // 코드를
        // 비교한다.

        // 결론 : 기본 자료형과 null을 제외한 클래스로 생성한 모든 객체는 "=="로 비고하면 안되고 equals() 메소드로 비교해야 한다.
        if (str1.equals(str3)) {
            System.out.println("같다");
        } else {
            System.out.println("다르다");
        }

        // `static` 키워드를 메소드나 변수에 붙일 때는 다음 상황에서 사용합니다:

        // 1. **클래스 메소드 (Static 메소드)**:
        // - 메소드를 객체의 인스턴스에 종속되지 않고, 클래스 자체에 속한 메소드로 만들고 싶을 때 사용합니다.
        // - 클래스 메소드는 클래스 이름을 통해 직접 호출할 수 있습니다.
        // - 주로 유틸리티 메소드나 프로그램의 진입점인 `main` 메소드와 같은 메소드를 `static`으로 선언합니다.
        // - 예시: `public static void main(String[] args) { ... }`

        // 2. **클래스 변수 (Static 변수)**:
        // - 모든 객체 인스턴스가 공유하는 변수로 만들고 싶을 때 사용합니다.
        // - 클래스 변수는 모든 객체가 동일한 값을 공유하며, 객체 인스턴스 간에 데이터 공유에 유용합니다.
        // - 예시: `private static int count = 0;`

        // 3. **상수 (Static 상수)**:
        // - 변경되지 않는 값으로 사용되는 상수를 표현하기 위해 `static` 키워드와 `final` 키워드를 함께 사용합니다.
        // - 상수는 주로 대문자로 작성하며, 여러 객체에서 공유되는 상수 값을 나타냅니다.
        // - 예시: `public static final double PI = 3.14159;`

        // 일반적으로 클래스 레벨에서 데이터를 공유하거나, 객체 인스턴스와 관계 없이 독립적인 작업을 수행하는 경우에 `static` 키워드를
        // 사용합니다. 객체 인스턴스와 관련된 데이터는 객체 변수와 인스턴스 메소드를 사용하여 처리하는 반면, 클래스 전체에 관련된 데이터는 클래스
        // 변수와 클래스 메소드로 처리합니다.

    }
}
